@page "/product/create"
@page "/product/edit/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject IProductRepository _productRepository
@inject NavigationManager _navigationManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _JSRuntime
<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Category</h3>
    <div class="col-md-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator/>            
            <div class="form-group">
                <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Name"/>
            </div>
                <div class="form-group">
                    <label>Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Color" />
                </div>
                <div class="form-group">
                    <label>Description</label>

                    <SfRichTextEditor @bind-Value="Product.Description" ></SfRichTextEditor>
                    <ValidationMessage For="()=>Product.Description"></ValidationMessage>
                </div>
                <div class="row pt-3">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.ShopeFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Shope Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Customer Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <label class="form-label">Category</label>
                            <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                                <option value="0" disabled="disabled" selected>--Select Category---</option>
                                @foreach(var cat in categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>

                    </div>
                    <div class="form-group pt-4 col-6">
                        <InputFile OnChange="HandelImageUpload"></InputFile>
                    </div>
                </div>

            <div class="form-group py-2">
                <button class="btn btn-primary">@Title</button>
                    <NavLink href="Product" class="btn btn-secondary">Back to Index</NavLink>
            </div>
        </EditForm>
        }
    </div>
<div class="col-md-2">
    <img src="@Product.ImageUrl" class="w-100"/>
</div>
</div>
@code {

    [Parameter]
    public int Id {get; set;}
    private ProductDTO Product { get; set; } = new()
    {
            ImageUrl = "/images/product/default.png"
    };
    private string Title{ get; set; }="Create";
    private IEnumerable<CategoryDTO> categories { get; set; } = new List<CategoryDTO>();
    public bool IsLoading { get; set; }
    public string OldImageUrl{ get; set; }
    private async Task UpsertProduct()
    {if (Product.Id==0)
        {
            //creat
            await _productRepository.Create(Product);
            await _JSRuntime.ToastrSuccess("Created Successfully");

        }
        else
        {
            await _productRepository.Update(Product);
            if (OldImageUrl!=Product.ImageUrl)
            {
                _fileUpload.DeleteFile(OldImageUrl);
                await _JSRuntime.ToastrSuccess("Updated Successfully");
            }
        }
        _navigationManager.NavigateTo("product");

    }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {if (firstrender)
        {
            await LoadProducts();

        }
    }
    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        categories = await _categoryRepository.GetAll();
        if (Id!=0)
        {
            Title = "Update";
            Product = await _productRepository.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }
        IsLoading = false;
        StateHasChanged();

    }
    private async Task HandelImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {if (e.GetMultipleFiles().Count>0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower()==".jpg"||fileInfo.Extension.ToLower()==".jpeg"
                    ||fileInfo.Extension.ToLower()==".png")
                    {
                        Product.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _JSRuntime.ToastrError("please select .jpg/.jpeg/.png file only");
                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            
            await _JSRuntime.ToastrError(ex.Message);
        }
    }
}