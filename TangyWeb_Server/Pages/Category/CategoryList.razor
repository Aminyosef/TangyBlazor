@page "/category"
@using Tangy_Common
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jSruntim
@attribute [Authorize(Roles =SD.Role_Admin)]

<DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category</a>
    </div>
    <div class="col-12">
        @if (categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var item in categories)
                {
                    <tr>
                        <td>@item.Name</td>
                            <td>
                                <NavLink href="@($"category/edit/{item.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandelDelete(item.Id)">Delete</button>
                            </td>

                    </tr>
                }
               
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif"/>
                </div>
            }
            else
            {
                <p>No Records found</p>
            }
        }
    </div>
</div>
@code {
    private IEnumerable<CategoryDTO> categories { get; set; } = new List<CategoryDTO>();
   
    private bool IsLoading { get; set; } 
    private int DeletedCategoryId { get; set; } = 0;
    public bool Visible { get; set; } = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategory();
        }
    }
    private async Task LoadCategory()
    {
        IsLoading = true;
        StateHasChanged();
        categories =await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();

    }
    private void HandelDelete(int id)
    {
        DeletedCategoryId = id;
        _jSruntim.InvokeVoidAsync("ShowDeleteConfirmationModal");

    }
    public async Task ConfirmDelete_Click(bool IsConfirmed)
    {
        IsLoading = true;
        if (IsConfirmed && DeletedCategoryId!=0)
        {
            await Task.Delay(5000);
            //delete
           await _categoryRepository.Delete(DeletedCategoryId);
           await LoadCategory();
           await _jSruntim.InvokeVoidAsync("HideDeleteConfirmationModal");

        }
        IsLoading = false;

    }
}
